{"version":3,"sources":["logo.svg","stores/TokenStore.js","stores/GiraffeStore.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Loginstates","LOGGING_IN","LOGGEDOUT","LOGGED_IN","TokenStore","state","token","logindata","username","password","this","localStorage","getItem","fetch","method","body","JSON","stringify","headers","then","response","text","console","log","setItem","catch","decorate","observable","tokenStore","states","LOADING","DONE","FAILED","GiraffeStore","props","giraffes","fetchGiraffes","loading","Authorization","json","resp","giraffeStore","About","withRouter","history","match","params","onClick","push","observer","className","src","logo","alt","href","target","rel","to","path","component","exact","render","map","giraffe","key","name","pop","Form","Group","Control","type","value","onChange","e","placeholder","doLogin","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","addEventListener","setTimeout","prompt","ReactDOM","document","getElementById","URL","process","origin","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.42f35a4a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import {decorate, observable} from \"mobx\";\r\nconst baseUrl = process.env.NODE_ENV === 'development' ?  \"http://localhost:8080/\":\"\"; //Check if dev\r\n\r\nconst Loginstates = {LOGGING_IN:\"Loading\", LOGGEDOUT:\"Logout\", LOGGED_IN:\"LoggedIn\"};\r\nclass TokenStore {\r\n    state = Loginstates.LOGGEDOUT;\r\n    token = null;\r\n    logindata = {username:\"\",password:\"\"};\r\n\r\n    constructor() {\r\n        this.token = localStorage.getItem(\"girafToken\")\r\n        //Validate if token is still good and keep/discard token and set state\r\n    }\r\n\r\n    doLogin() {\r\n        this.state=Loginstates.LOGGING_IN;\r\n        fetch(baseUrl + \"rest/login\",{\r\n            method:\"POST\",\r\n            body:JSON.stringify(this.logindata),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(\r\n            (response)=> {\r\n                response.text().then(\r\n                (token)=> {\r\n                    console.log(\"Got Token: \" + token)\r\n                    this.token=token;\r\n                    localStorage.setItem(\"girafToken\",token);\r\n                    this.state=Loginstates.LOGGED_IN;}\r\n\r\n            )}\r\n        ).catch(()=>this.state = Loginstates.LOGGEDOUT )\r\n    }\r\n}\r\n\r\n\r\ndecorate(TokenStore,{\r\n    state: observable,\r\n    token: observable,\r\n    logindata:observable\r\n\r\n});\r\n\r\nexport const tokenStore = new TokenStore();","import {decorate, observable} from \"mobx\";\r\nimport {tokenStore} from \"./TokenStore\";\r\n\r\n\r\nconst baseUrl = process.env.NODE_ENV === 'development' ?  \"http://localhost:8080/\":\"\"; //Check if dev\r\n\r\n\r\nconst states = {LOADING:\"LOAD\", DONE:\"DONE\", FAILED:\"FAILED\"}\r\nclass GiraffeStore {\r\n    state = states.DONE;\r\n    giraffes = [\"Loading giraffes\"];\r\n\r\n    constructor(props) {\r\n        this.fetchGiraffes();\r\n    }\r\n\r\n    fetchGiraffes (){\r\n        const token = tokenStore.token;\r\n        this.loading = states.LOADING;\r\n        fetch(baseUrl + \"rest/giraffes\", {\r\n            headers: {\r\n                Authorization: token\r\n            }\r\n        }).then(\r\n            (response)=> response.json().then(\r\n                (json)=> {\r\n                    this.giraffes=json;\r\n                    this.state=states.DONE;}\r\n            )\r\n        ).catch(()=>this.state = states.FAILED )\r\n    }\r\n\r\n\r\n    async fetchGiraffes3(){\r\n        try {\r\n            let resp = await fetch(baseUrl + \"rest/giraffes\");\r\n            let json = await resp.json();\r\n            this.giraffes = json;\r\n        } catch (e){\r\n            this.giraffes = [\"Loading failed :(\"];\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\ndecorate(GiraffeStore,{\r\n    giraffes: observable\r\n});\r\n\r\nexport const giraffeStore = new GiraffeStore();","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './App.css';\r\nimport {Link, Route, Switch, withRouter} from \"react-router-dom\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport {giraffeStore} from \"./stores/GiraffeStore\";\r\nimport {tokenStore} from \"./stores/TokenStore\";\r\n\r\nimport {observer} from \"mobx-react\";\r\nimport {Form, InputGroup} from \"react-bootstrap\";\r\n\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Glædelig DevOps! E19 - 5/9 - version 5\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n        <Link to={\"/about/giraffes\"}>Look at About!</Link>\r\n        <Switch>\r\n          <Route path={\"/about/:text\"} component={About}/>\r\n          <Route exact path={\"/\"} render={()=><h1>Welcome</h1>}/>\r\n          <Route render={()=><h2>noMatch - 404</h2>}/>\r\n        </Switch>\r\n          <ul>\r\n          {giraffeStore.giraffes.map((giraffe,key)=>\r\n              <li key={key}>{giraffe.name}</li>\r\n          )}\r\n          </ul>\r\n        <Button onClick={()=>giraffeStore.giraffes.push(\"Elmer\")}>Tilføj giraf</Button>\r\n        <Button onClick={()=>giraffeStore.giraffes.pop()}>Fjern giraf</Button>\r\n\r\n        <h2>Loginstatus = {tokenStore.state}</h2>\r\n        <Form>\r\n          <Form.Group>\r\n            <Form.Control type=\"text\"\r\n                          value={tokenStore.logindata.username}\r\n                          onChange={(e)=>tokenStore.logindata.username=e.target.value}\r\n                          placeholder=\"Enter username\"\r\n            />\r\n            <Form.Control type=\"text\"\r\n                          value={tokenStore.logindata.password}\r\n                          placeholder=\"Enter password\"\r\n                          onChange={(e)=>tokenStore.logindata.password=e.target.value}\r\n            />\r\n          </Form.Group>\r\n          <Button onClick={()=>tokenStore.doLogin()}>Login</Button>\r\n        </Form>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst About = withRouter(({history,match})=>{\r\n  console.log(history);\r\n  console.log(match);\r\n  return <div><h1>About {match.params.text}</h1>\r\n    <Button onClick={()=>history.push(\"/\")}>Go to front</Button>\r\n  </div>\r\n});\r\n\r\n\r\nexport default observer(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {HashRouter} from \"react-router-dom\";\r\nlet deferredPrompt;\r\nwindow.addEventListener('beforeinstallprompt', (e) => {\r\n    // Stash the event so it can be triggered later.\r\n    console.log(\"Got beforeinstallprompt\");\r\n    deferredPrompt = e;\r\n    setTimeout((e)=>{e.prompt()},5000);\r\n});\r\n\r\nReactDOM.render(<HashRouter><App /></HashRouter>, document.getElementById('root'));\r\n\r\n// window.addEventListener('beforeinstallprompt', (e) => {\r\n//     // Stash the event so it can be triggered later.\r\n//     console.log(\"PWA\");\r\n//     e.   prompt();\r\n// });\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n\r\n\r\n"],"sourceRoot":""}