{"version":3,"sources":["logo.svg","stores/GiraffeStore.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GiraffeStore","giraffes","decorate","observable","giraffeStore","About","withRouter","history","match","console","log","params","text","onClick","push","Default","observer","className","src","logo","alt","href","target","rel","to","path","component","map","giraffeName","key","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,kC,+OCEtBC,E,sCACjBC,SAAW,CAAC,SAAS,WAEzBC,YAASF,EAAa,CAClBC,SAAUE,M,YCGRC,EAAe,IAAIJ,EAkCzB,IAAMK,EAAQC,YAAW,YAAqB,IAAnBC,EAAkB,EAAlBA,QAASC,EAAS,EAATA,MAGlC,OAFAC,QAAQC,IAAIH,GACZE,QAAQC,IAAIF,GACL,6BAAK,qCAAWA,EAAMG,OAAOC,MAClC,kBAAC,IAAD,CAAQC,QAAS,kBAAIN,EAAQO,KAAK,OAAlC,kBAIEC,EAAU,kBAAI,8CAELC,cA3Cf,WAEE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,wEAGA,uBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,eAQA,kBAAC,IAAD,CAAMC,GAAI,mBAAV,kBACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAM,eAAgBC,UAAWrB,IACxC,kBAAC,IAAD,CAAOqB,UAAWX,KAEpB,4BACGX,EAAaH,SAAS0B,IAAI,SAACC,EAAYC,GAAb,OACvB,wBAAIA,IAAKA,GAAMD,MAGrB,kBAAC,IAAD,CAAQf,QAAS,kBAAIT,EAAaH,SAASa,KAAK,WAAhD,uBCzBYgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASzB,MACvB,2DCXN0B,IAASC,OAAO,kBAAC,IAAD,KAAY,kBAAC,EAAD,OAAsBC,SAASC,eAAe,SD0HpE,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.73adfaa1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import {decorate, observable} from \"mobx\";\r\n\r\nexport default class GiraffeStore {\r\n    giraffes = [\"Marius\",\"Melman\"];\r\n}\r\ndecorate(GiraffeStore,{\r\n    giraffes: observable\r\n});","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './App.css';\r\nimport {Link, Route, Switch, withRouter} from \"react-router-dom\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport GiraffeStore from \"./stores/GiraffeStore\";\r\nimport {observer} from \"mobx-react\";\r\n\r\nconst giraffeStore = new GiraffeStore();\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Glædelig DevOps! E19 - 5/9 - version 5\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n        <Link to={\"/about/giraffes\"}>Look at About!</Link>\r\n        <Switch>\r\n          <Route path={\"/about/:text\"} component={About}/>\r\n          <Route component={Default}/>\r\n        </Switch>\r\n        <ul>\r\n          {giraffeStore.giraffes.map((giraffeName,key)=>\r\n              <li key={key}>{giraffeName}</li>\r\n          )}\r\n          </ul>\r\n        <Button onClick={()=>giraffeStore.giraffes.push(\"Elmer\")}>Tilføj giraf</Button>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst About = withRouter(({history, match})=>{\r\n  console.log(history);\r\n  console.log(match);\r\n  return <div><h1>About {match.params.text}</h1>\r\n    <Button onClick={()=>history.push(\"/\")}>Go to front</Button>\r\n  </div>\r\n});\r\n\r\nconst Default = ()=><h2>noMatch - 404</h2>;\r\n\r\nexport default observer(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(<HashRouter><App /></HashRouter>, document.getElementById('root'));\r\n\r\n// window.addEventListener('beforeinstallprompt', (e) => {\r\n//     // Stash the event so it can be triggered later.\r\n//     console.log(\"PWA\");\r\n//     e.prompt();\r\n// });\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}